--- a/net/minecraft/client/renderer/ItemRenderer.java
+++ b/net/minecraft/client/renderer/ItemRenderer.java
@@ -2,24 +2,14 @@
 
 import com.google.common.collect.Sets;
 import com.mojang.blaze3d.platform.GlStateManager;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
-import javax.annotation.Nullable;
 import net.minecraft.block.BlockState;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.entity.player.ClientPlayerEntity;
 import net.minecraft.client.gui.FontRenderer;
 import net.minecraft.client.renderer.color.ItemColors;
-import net.minecraft.client.renderer.model.BakedQuad;
-import net.minecraft.client.renderer.model.IBakedModel;
-import net.minecraft.client.renderer.model.ItemCameraTransforms;
-import net.minecraft.client.renderer.model.ItemTransformVec3f;
-import net.minecraft.client.renderer.model.ModelManager;
-import net.minecraft.client.renderer.model.ModelResourceLocation;
+import net.minecraft.client.renderer.model.*;
 import net.minecraft.client.renderer.texture.AtlasTexture;
 import net.minecraft.client.renderer.texture.TextureManager;
-import net.minecraft.client.renderer.tileentity.ItemStackTileEntityRenderer;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
@@ -40,6 +30,12 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
+import javax.annotation.Nullable;
+import java.text.NumberFormat;
+import java.util.List;
+import java.util.Random;
+import java.util.Set;
+
 @OnlyIn(Dist.CLIENT)
 public class ItemRenderer implements IResourceManagerReloadListener {
    public static final ResourceLocation field_110798_h = new ResourceLocation("textures/misc/enchanted_item_glint.png");
@@ -51,7 +47,7 @@
 
    public ItemRenderer(TextureManager p_i46552_1_, ModelManager p_i46552_2_, ItemColors p_i46552_3_) {
       this.field_175057_n = p_i46552_1_;
-      this.field_175059_m = new ItemModelMesher(p_i46552_2_);
+      this.field_175059_m = new net.minecraftforge.client.ItemModelMesherForge(p_i46552_2_);
 
       for(Item item : Registry.field_212630_s) {
          if (!field_195411_c.contains(item)) {
@@ -75,6 +71,10 @@
    }
 
    private void func_191967_a(IBakedModel p_191967_1_, int p_191967_2_, ItemStack p_191967_3_) {
+      if (net.minecraftforge.common.ForgeConfig.CLIENT.allowEmissiveItems.get()) {
+         net.minecraftforge.client.ForgeHooksClient.renderLitItem(this, p_191967_1_, p_191967_2_, p_191967_3_);
+         return;
+      }
       Tessellator tessellator = Tessellator.func_178181_a();
       BufferBuilder bufferbuilder = tessellator.func_178180_c();
       bufferbuilder.func_181668_a(7, DefaultVertexFormats.field_176599_b);
@@ -98,7 +98,7 @@
          if (p_180454_2_.func_188618_c()) {
             GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
             GlStateManager.enableRescaleNormal();
-            ItemStackTileEntityRenderer.field_147719_a.func_179022_a(p_180454_1_);
+            p_180454_1_.func_77973_b().getTileEntityItemStackRenderer().func_179022_a(p_180454_1_);
          } else {
             this.func_191961_a(p_180454_2_, p_180454_1_);
             if (p_180454_1_.func_77962_s()) {
@@ -164,7 +164,7 @@
             k = k | -16777216;
          }
 
-         this.func_191969_a(p_191970_1_, bakedquad, k);
+         net.minecraftforge.client.model.pipeline.LightUtil.renderQuadColor(p_191970_1_, bakedquad, k);
       }
 
    }
@@ -225,11 +225,8 @@
          GlStateManager.enableBlend();
          GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
          GlStateManager.pushMatrix();
-         ItemCameraTransforms itemcameratransforms = p_184394_2_.func_177552_f();
-         ItemCameraTransforms.func_188034_a(itemcameratransforms.func_181688_b(p_184394_3_), p_184394_4_);
-         if (this.func_183005_a(itemcameratransforms.func_181688_b(p_184394_3_))) {
-            GlStateManager.cullFace(GlStateManager.CullFace.FRONT);
-         }
+         // TODO: check if negative scale is a thing
+         p_184394_2_ = net.minecraftforge.client.ForgeHooksClient.handleCameraTransforms(p_184394_2_, p_184394_3_, p_184394_4_);
 
          this.func_180454_a(p_184394_1_, p_184394_2_);
          GlStateManager.cullFace(GlStateManager.CullFace.BACK);
@@ -260,7 +257,7 @@
       GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
       GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
       this.func_180452_a(p_191962_2_, p_191962_3_, p_191962_4_.func_177556_c());
-      p_191962_4_.func_177552_f().func_181689_a(ItemCameraTransforms.TransformType.GUI);
+      p_191962_4_ = net.minecraftforge.client.ForgeHooksClient.handleCameraTransforms(p_191962_4_, ItemCameraTransforms.TransformType.GUI, false);
       this.func_180454_a(p_191962_1_, p_191962_4_);
       GlStateManager.disableAlphaTest();
       GlStateManager.disableRescaleNormal();
@@ -299,6 +296,7 @@
             crashreportcategory.func_189529_a("Item Type", () -> {
                return String.valueOf((Object)p_184391_2_.func_77973_b());
             });
+            crashreportcategory.func_189529_a("Registry Name", () -> String.valueOf(p_184391_2_.func_77973_b().getRegistryName()));
             crashreportcategory.func_189529_a("Item Damage", () -> {
                return String.valueOf(p_184391_2_.func_77952_i());
             });
@@ -319,10 +317,12 @@
       this.func_180453_a(p_175030_1_, p_175030_2_, p_175030_3_, p_175030_4_, (String)null);
    }
 
+   private final NumberFormat numberFormat = NumberFormat.getIntegerInstance();
+
    public void func_180453_a(FontRenderer p_180453_1_, ItemStack p_180453_2_, int p_180453_3_, int p_180453_4_, @Nullable String p_180453_5_) {
       if (!p_180453_2_.func_190926_b()) {
          if (p_180453_2_.func_190916_E() != 1 || p_180453_5_ != null) {
-            String s = p_180453_5_ == null ? String.valueOf(p_180453_2_.func_190916_E()) : p_180453_5_;
+            String s = p_180453_5_ == null ? numberFormat.format(p_180453_2_.func_190916_E()) : p_180453_5_;
             GlStateManager.disableLighting();
             GlStateManager.disableDepthTest();
             GlStateManager.disableBlend();
@@ -330,9 +330,12 @@
             GlStateManager.enableBlend();
             GlStateManager.enableLighting();
             GlStateManager.enableDepthTest();
+            // Fixes opaque cooldown overlay a bit lower
+            // TODO: check if enabled blending still screws things up down the line.
+            GlStateManager.enableBlend();
          }
 
-         if (p_180453_2_.func_77951_h()) {
+         if (p_180453_2_.func_77973_b().showDurabilityBar(p_180453_2_)) {
             GlStateManager.disableLighting();
             GlStateManager.disableDepthTest();
             GlStateManager.disableTexture();
@@ -340,11 +343,9 @@
             GlStateManager.disableBlend();
             Tessellator tessellator = Tessellator.func_178181_a();
             BufferBuilder bufferbuilder = tessellator.func_178180_c();
-            float f = (float)p_180453_2_.func_77952_i();
-            float f1 = (float)p_180453_2_.func_77958_k();
-            float f2 = Math.max(0.0F, (f1 - f) / f1);
-            int i = Math.round(13.0F - f * 13.0F / f1);
-            int j = MathHelper.func_181758_c(f2 / 3.0F, 1.0F, 1.0F);
+            double health = p_180453_2_.func_77973_b().getDurabilityForDisplay(p_180453_2_);
+            int i = Math.round(13.0F - (float)health * 13.0F);
+            int j = p_180453_2_.func_77973_b().getRGBDurabilityForDisplay(p_180453_2_);
             this.func_181565_a(bufferbuilder, p_180453_3_ + 2, p_180453_4_ + 13, 13, 2, 0, 0, 0, 255);
             this.func_181565_a(bufferbuilder, p_180453_3_ + 2, p_180453_4_ + 13, i, 1, j >> 16 & 255, j >> 8 & 255, j & 255, 255);
             GlStateManager.enableBlend();
@@ -383,4 +384,9 @@
    public void func_195410_a(IResourceManager p_195410_1_) {
       this.field_175059_m.func_178085_b();
    }
+
+   @Override
+   public net.minecraftforge.resource.IResourceType getResourceType() {
+      return net.minecraftforge.resource.VanillaResourceType.MODELS;
+   }
 }
